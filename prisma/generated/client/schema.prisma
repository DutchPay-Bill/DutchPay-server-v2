generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  // binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
  directUrl = env("DB_DIRECT")
}

model users {
  id                    Int            @id @default(autoincrement())
  username              String?         @unique
  password              String?
  fullname              String?
  phone_number          String?        @unique
  email                 String?        @unique
  bio                   String?
  dob                   DateTime?
  photo_profile         String?
  created_at            DateTime       @default(now())
  update_at             DateTime       @updatedAt
  friends               friends[]
  orders                orders[]
  bill                  bill[]
  payment_method_detail payment_method_detail[]
}
model orders {
  id            Int       @id @default(autoincrement())
  users         users?    @relation(fields: [user_id], references: [id])
  user_id       Int?
  bill          bill?     @relation(fields: [bill_id], references: [id])
  bill_id       Int?
  menu_name     String
  qty           Int
  price         BigInt
  friends_order friends_order[]
}
model friends_order {
  id                 Int        @id @default(autoincrement())
  orders             orders?    @relation(fields: [orders_id], references: [id])
  orders_id          Int?
  friends            friends?   @relation(fields: [friends_id], references: [id])
  friends_id         Int?
  friend_order_price BigInt
  is_paid            Boolean  @default(false)
  created_at         DateTime   @default(now())
  update_at          DateTime   @updatedAt
}

model friends {
  id             Int             @id @default(autoincrement())
  users          users?           @relation(fields: [user_id], references: [id])
  user_id        Int?
  friends_name   String
  friends_photo  String?
  friends_order  friends_order[]
}

model bill {
  id                      Int                       @id @default(autoincrement())
  users                   users?                    @relation(fields: [user_id], references: [id])
  user_id                 Int?
  payment_method_details  payment_method_detail?    @relation(fields: [payment_method_id], references: [id])
  payment_method_id       Int?
  description             String
  discount                Float?
  tax                     Int
  service                 Float?
  total_price             BigInt
  date                    DateTime                  @default(now())
  is_completed            Boolean                   @default(false)
  orders                  orders[]
}
model payment_method {
  id                      Int                      @id @default(autoincrement())
  payment_method_name     String
  payment_method_logo     String
  payment_method_detail   payment_method_detail[]
}


model payment_method_detail {
  id                  Int               @id @default(autoincrement())
  users               users?             @relation(fields: [user_id], references: [id])
  user_id             Int?
  payment_method      payment_method?    @relation(fields: [payment_method_id], references: [id])
  payment_method_id   Int?
  card_number         BigInt
  card_name           String
  bill                bill[]
}

enum Order_status_Enum {
  paid
  unpaid
}

enum Bill_status_Enum {
  ongoing
  completed
}